Q.1 Write a Java Program to implement Factory method for Pizza Store with 
createPizza(), orederPizza(), prepare(), Bake(), cut(), box(). Use this to create 
variety of pizza’s like NyStyleCheesePizza, ChicagoStyleCheesePizza etc. 

import java.util.*;
import java.io.*;
interface pizza
{
	void createPizza();
	void orderPizza();
	void preparePizza();
	void bake();
	void cut();
	void box();
	
}
class Nystylecheesepizza implements pizza
{
	public void createPizza()
	{
		System.out.println("Nystyle cheese pizza created");
	}
	public void orderPizza()
	{
		System.out.println("Nystyle cheese pizza ordered");
	}
	public void preparePizza()
	{
		System.out.println("Nystyle cheese pizza prepared");
	}
	public void bake()
	{
		System.out.println("Nystyle cheese pizza baked");
	}
	public void cut()
	{
		System.out.println("Nystyle cheese pizza is cut");
	}
	public void box()
	{
		System.out.println("Nystyle cheese pizza is boxed");
	}
}

class ChicagostylecheesePizza implements pizza
{
	public void createPizza()
	{
		System.out.println("ChicagostylecheesePizza created");
	}
	public void orderPizza()
	{
		System.out.println("ChicagostylecheesePizza ordered");
	}
	public void preparePizza()
	{
		System.out.println("ChicagostylecheesePizza prepared");
	}
	public void bake()
	{
		System.out.println("ChicagostylecheesePizza baked");
	}
	public void cut()
	{
		System.out.println("NyChicagostylecheesePizza is cut");
	}
	public void box()
	{
		System.out.println("ChicagostylecheesePizza is boxed");
	}
}
class WithoutCheesePizza implements pizza
{
	public void createPizza()
	{
		System.out.println("WithoutCheesePizza created");
	}
	public void orderPizza()
	{
		System.out.println("WithoutCheesePizza ordered");
	}
	public void preparePizza()
	{
		System.out.println("WithoutCheesePizza prepared");
	}
	public void bake()
	{
		System.out.println("WithoutCheesePizza baked");
	}
	public void cut()
	{
		System.out.println("WithoutCheesePizza is cut");
	}
	public void box()
	{
		System.out.println("WithoutCheesePizza is boxed");
	}
}




class PizzaFactary{
	

public pizza getIns(String st)
{
	if(st==null)
		return null;
	else if(st.equalsIgnoreCase("Nystylecheesepizza"))
		return new Nystylecheesepizza();
	else if(st.equalsIgnoreCase("ChicagostylecheesePizza"))
		return new ChicagostylecheesePizza();
	else if(st.equalsIgnoreCase("WithoutCheesePizza"))
		return new WithoutCheesePizza();
	return null;
}
}
public class ass3 {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		PizzaFactary sf=new PizzaFactary();
		
		
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		System.out.println("1:Nystylecheesepizza\n2:ChicagostylecheesePizza\n3:WithoutCheesePizza");
		int n=sc.nextInt();
		switch(n)
		{
		case 1:	pizza s1=sf.getIns("Nystylecheesepizza");
				s1.createPizza();
				s1.orderPizza();
				s1.preparePizza();
				s1.bake();
				s1.cut();
				s1.box();
				break;
		case 2:	pizza s2=sf.getIns("ChicagostylecheesePizza");
				s2.createPizza();
				s2.orderPizza();
				s2.preparePizza();
				s2.bake();
				s2.cut();
				s2.box();
				break;
		case 3:	pizza s3=sf.getIns("WithoutCheesePizza");
				s3.createPizza();
				s3.orderPizza();
				s3.preparePizza();
				s3.bake();
				s3.cut();
				s3.box();
				break;
		default:	System.out.println("we dont have this kind pizza");
		}

	}

}

Q.2 Write a python program to implement logistic Regression for handwritten digit 
dataset. 

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import linear_model, metrics

df=pd.read_csv("insurance_data.csv")
print(df)
print(" ")
X = df[['age']]
print(X)
y = df['bought_insurance']
print(y)

#Plotting graph
plt.scatter(df.age,df.bought_insurance,color='red',marker='+')
print(plt.show())

# splitting X and y into training and testing sets
X_train, X_test,y_train, y_test = train_test_split(X, y,test_size=0.1)
print("Train X")
print(X_train)
print("Test X")
print(X_test) 
print("Train Y")
print(y_train) 
print("Test Y")
print(y_test) 

# create logistic regression object
reg = linear_model.LogisticRegression()
print(reg) 

# train the model using the training sets
reg.fit(X_train, y_train)
 
# making predictions on the testing set
y_pred = reg.predict(X_test)
 
# comparing actual response values (y_test)
# with predicted response values (y_pred)
print("Logistic Regression model accuracy(in %):",metrics.accuracy_score(y_test, y_pred)*100)

Q.3 Print below array elements using map:
a. const fruits = ["apple", "banana", "cherry", “bat”]
b. Only print fruits it should remove bat and print it 

FruitsList.jsx
import React from 'react';

const FruitsList = () => {
  const fruits = ["apple", "banana", "cherry", "bat"];

  // Filter out "bat" from the fruits array
  const filteredFruits = fruits.filter(fruit => fruit !== "bat");

  return (
    <div>
      <h1>Slip 8</h1>
      <h2>Fruits List</h2>
      <ul>
        {filteredFruits.map((fruit, index) => (
          <li key={index}>{fruit}</li>
        ))}
      </ul>
    </div>
  );
};

export default FruitsList;
