Q.1 Write a Java Program to implement Factory Design pattern for operating 
system. 

import java.io.*;
import java.util.*;

interface os{
      void draw();
}    
Class  windows implements os{
    Public void draw(){
     
    System.out.println("Hi i am a windows");
    }
}
class linux implements os{
    public void draw(){
    
    System.out.println("Hi i am a linux");
    }
}
class macbook implements os{
    public void draw(){
    
    System.out.println("Hi i am a macbook");
    }
}

class ShapeFactory{
    public os getIns(String shapeType){
        if(shapeType==null){
            return null;
        }
        else if(shapeType.equalsIgnoreCase("WINDOWS")){
            return new windows();
        }
        else if(shapeType.equalsIgnoreCase("LINUX")){
            return new linux();
        }
        else if(shapeType.equalsIgnoreCase("MACBOOK")){
            return new macbook();
        }
        return null;
    }
}
public class osfactory{
    public static void main(String[] args){
        ShapeFactory shapeFactory = new ShapeFactory();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter the os\nEnter 1 for windows \n 2 for linux \n 3 for ");
        Scanner sc = new Scanner(System.in);
        int var = sc.nextInt();
        
        switch(var){
            case 1: 
                os s 1 = shapeFactory.getIns("WINDOWS");
                s1.draw();
                break;
                 case 2:
                os s2 = shapeFactory.getIns("LINUX");
                s2.draw();
                break;
                 case 3:
                os s3 = shapeFactory.getIns("MACBOOK");
                s3.draw();
                break;
           }
        }
    }

Q.2 Write a python program to implement Polynomial Regression for given dataset.
Use position_sal.csv. 

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

df=pd.read_excel("./position.xlsx")
print(df)
X = df.iloc[:, 1:2].values
y = df.iloc[:, 2].values
print(X)
print(y)

lin = LinearRegression() 
print(lin.fit(X, y))

poly = PolynomialFeatures(degree=4)
X_poly = poly.fit_transform(X)
 
poly.fit(X_poly, y)
lin2 = LinearRegression()
print(lin2.fit(X_poly, y))

plt.scatter(X, y, color='blue')
 
plt.plot(X, lin.predict(X), color='red')
plt.title('Linear Regression')
plt.xlabel('level')
plt.ylabel('salary')

plt.show()

plt.scatter(X, y, color='blue')
 
plt.plot(X, lin2.predict(poly.fit_transform(X)),
         color='red')
plt.title('Polynomial Regression')
plt.xlabel('Level')
plt.ylabel('salary')
 
plt.show()

Q.3 Print below array elements using map:
a. const fruits = ["apple", "banana", "cherry", “bat”]
b. Only print fruits it should remove bat and print it

FruitsList.jsx
import React from 'react';

const FruitsList = () => {
  const fruits = ["apple", "banana", "cherry", "bat"];

  // Filter out "bat" from the fruits array
  const filteredFruits = fruits.filter(fruit => fruit !== "bat");

  return (
    <div>
      <h1>Slip 8</h1>
      <h2>Fruits List</h2>
      <ul>
        {filteredFruits.map((fruit, index) => (
          <li key={index}>{fruit}</li>
        ))}
      </ul>
    </div>
  );
};

export default FruitsList;