Q.1 Write a Java Program to implement Factory Design pattern for operating 
system example.

import java.io.*;
import java.util.*;

interface os{
      void draw();
}    
Class  windows implements os{
    Public void draw(){
     
    System.out.println("Hi i am a windows");
    }
}
class linux implements os{
    public void draw(){
    
    System.out.println("Hi i am a linux");
    }
}
class macbook implements os{
    public void draw(){
    
    System.out.println("Hi i am a macbook");
    }
}

class ShapeFactory{
    public os getIns(String shapeType){
        if(shapeType==null){
            return null;
        }
        else if(shapeType.equalsIgnoreCase("WINDOWS")){
            return new windows();
        }
        else if(shapeType.equalsIgnoreCase("LINUX")){
            return new linux();
        }
        else if(shapeType.equalsIgnoreCase("MACBOOK")){
            return new macbook();
        }
        return null;
    }
}
public class osfactory{
    public static void main(String[] args){
        ShapeFactory shapeFactory = new ShapeFactory();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter the os\nEnter 1 for windows \n 2 for linux \n 3 for ");
        Scanner sc = new Scanner(System.in);
        int var = sc.nextInt();
        
        switch(var){
            case 1: 
                os s 1 = shapeFactory.getIns("WINDOWS");
                s1.draw();
                break;
                 case 2:
                os s2 = shapeFactory.getIns("LINUX");
                s2.draw();
                break;
                 case 3:
                os s3 = shapeFactory.getIns("MACBOOK");
                s3.draw();
                break;
           }
        }
    }

Q.2 Write a python program to implement multiple Linear Regression for predicting 
house price.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model,metrics

print("Multi variable linear Regression")
print("read data")
df=pd.read_csv("./Assignment2.csv")
print("Head of data")
print(df.head())
X = df[['area', 'room','window']]
y = df['price']

regr = linear_model.LinearRegression()
regr.fit(X, y)

print("Predicted value of area=20, room=2, window=2")
predicted= regr.predict([[110,5,4]])

print(predicted)
plt.scatter(df.area,df.price,color="red",marker="+")
plt.plot(df.area,regr.predict(df[['area', 'room','window']]),color="blue")
print(plt.show())
print("coeficent " )
print(regr.coef_)
print("\nintercept")
print(regr.intercept_)
#print("score")
#print(regr.score())

Q.3 Print below array elements using map:
a. let fruits1 = ["apple", "banana"];
b. let fruits2 = ["cherry", "orange"];
c. Merge both fruits array and print it

FruitList.jsx
import React from 'react';

const FruitsList = () => {
  let fruits1 = ["apple", "banana"];
  let fruits2 = ["cherry", "orange"];

  // Merge both arrays
  let allFruits = [...fruits1, ...fruits2];

  return (
    <div>
      <h1>Slip 9</h1>
      <h2>Merged Fruits List</h2>
      <ul>
        {allFruits.map((fruit, index) => (
          <li key={index}>{fruit}</li>
        ))}
      </ul>
    </div>
  );
};
export default FruitsList;