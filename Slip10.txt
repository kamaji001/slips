Q.1 Write a Java Program to implement Façade design pattern for Shape.

interface Shape{
    void draw();
 }  
class Rectangle implements Shape{
      public void draw(){
     System.out.println("Rectangle::draw()");
    }
}
class Square implements Shape{
      public void draw(){
     System.out.println("Square::draw()");
    }
}
class Circle implements Shape{                                                        
      public void draw(){
     System.out.println("Circle::draw()");
    }
}
class ShapeMaker{
    private Shape circle;
    private Shape rectangle;
    private Shape square;
    
    public ShapeMaker(){
        circle = new Circle();
        rectangle = new Rectangle();
        square = new Square();
    }
    public void drawCircle(){
        circle.draw();
    }
     public void drawRectangle(){
        rectangle.draw();
    }
     public void drawSquare(){
        square.draw();
    }
}
class Facade{
    public static void main(String[] args){
        ShapeMaker shapeMaker = new ShapeMaker();
        shapeMaker.drawCircle();
        shapeMaker.drawRectangle();
        shapeMaker.drawSquare();
    }
}

Q.2 Write a python program to implement k-nearest Neighbors algorithm to build a
prediction model. Use Iris Dataset. 

import pandas as pd
from sklearn.datasets import load_iris
iris = load_iris()

iris.feature_names

iris.target_names

df = pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

df['target'] = iris.target
df.head()

df[df.target==1].head()

df[df.target==2].head()

df['flower_name'] =df.target.apply(lambda x: iris.target_names[x])
df.head()

df[45:55]

df0 = df[:50]
df1 = df[50:100]
df2 = df[100:]

import matplotlib.pyplot as plt

plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'],color="green",marker='+')
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color="blue",marker='.')

plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.scatter(df0['petal length (cm)'], df0['petal width (cm)'],color="green",marker='+')
plt.scatter(df1['petal length (cm)'], df1['petal width (cm)'],color="blue",marker='.')

from sklearn.model_selection import train_test_split

X = df.drop(['target','flower_name'], axis='columns')
y = df.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

len(X_train)

len(X_test)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=10)
knn.fit(X_train,y_train)

print(knn.score(X_test, y_test))

print(knn.predict([[4.8,3.0,1.5,0.3]]))

from sklearn.metrics import confusion_matrix
y_pred = knn.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print(cm)

import matplotlib.pyplot as plt
import seaborn as sn
plt.figure(figsize=(7,5))
sn.heatmap(cm, annot=True)
plt.xlabel('Predicted')
plt.ylabel('Truth')
plt.show()
from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

Q.3 Create a basic todo list application: (use useReducer() ) 
a. Build a component for adding, displaying, and deleting tasks.
b. Use state to manage the list of tasks.
c. Add a form for users to input new tasks.
d. Display the list of tasks and provide a button to remove them.
e. Add a counter for the total number of tasks.

// TodoList.js
import React, { useState } from 'react';

const TodoList = () => {
  // State for managing tasks
  const [tasks, setTasks] = useState([]);
  // State for managing the input value in the form
  const [taskInput, setTaskInput] = useState('');

  // Function to handle task addition
  const addTask = () => {
    if (taskInput.trim() !== '') {
      setTasks([...tasks, taskInput]);
      setTaskInput('');
    }
  };

  // Function to handle task removal
  const removeTask = (index) => {
    const updatedTasks = [...tasks];
    updatedTasks.splice(index, 1);
    setTasks(updatedTasks);
  };

  return (
    <div>
      <h1>Slip 3</h1>
      <h2>Todo List</h2>

      {/* Task input form */}
      <div>
        <input
          type="text"
          placeholder="Enter a new task"
          value={taskInput}
          onChange={(e) => setTaskInput(e.target.value)}
        />
        <button onClick={addTask}>Add Task</button>
      </div>

      {/* Display tasks */}
      <ul>
        {tasks.map((task, index) => (
          <li key={index}>
            {task}
            <button onClick={() => removeTask(index)}>
              <span role="img" aria-label="Delete">
                🗑️
              </span>
            </button>
          </li>
        ))}
      </ul>

      {/* Display total number of tasks */}
      <p>Total Tasks: {tasks.length}</p>
    </div>
  );
};
export default TodoList;